
- name: Check installed elasticsearch plugins
  shell: "ls {{es_home}}/plugins"
  register: installed_plugins
  # changed_when: False
  ignore_errors: yes

- name: Remove elasticsearch plugins
  command: "{{es_home}}/bin/elasticsearch-plugin remove {{item}} --silent"
  ignore_errors: yes
  with_items: "{{ installed_plugins.stdout_lines | default([]) }}"
#  notify: restart elasticsearch
  register: plugin_removed
  # environment:
  #   CONF_DIR: "{{ conf_dir }}"
  #   ES_PATH_CONF: "{{ conf_dir }}"
  #   ES_INCLUDE: "{{ instance_default_file }}"

- name: copy plugins
  copy:
    src: "{{ item.file }}"
    dest: "/tmp/{{ item.file }}"
  with_items: "{{ es_plugins }}"

# - debug:
#     msg: "{{not (item.name in installed_plugins.stdout_lines)}}"
#   with_items: "{{ es_plugins }}"

- name: Install elasticsearch plugins
  command: "{{es_home}}/bin/elasticsearch-plugin install file:///tmp/{{ item.file }} --batch --silent"
  register: plugin_installed
  failed_when: "'ERROR' in plugin_installed.stdout"
  changed_when: plugin_installed.rc == 0
  with_items: "{{ es_plugins | default([]) }}"
  # when: not (item.name in installed_plugins.stdout_lines)
#  notify: restart elasticsearch
  # environment:
  #   CONF_DIR: "{{ conf_dir }}"
  #   ES_PATH_CONF: "{{ conf_dir }}"
  #   ES_INCLUDE: "{{ instance_default_file }}"
  #   ES_JAVA_OPTS: "{% if item.proxy_host is defined and item.proxy_host != '' and item.proxy_port is defined and item.proxy_port != ''%} -Dhttp.proxyHost={{ item.proxy_host }} -Dhttp.proxyPort={{ item.proxy_port }} -Dhttps.proxyHost={{ item.proxy_host }} -Dhttps.proxyPort={{ item.proxy_port }}  {% elif es_proxy_host is defined and es_proxy_host != '' %} -Dhttp.proxyHost={{ es_proxy_host }} -Dhttp.proxyPort={{ es_proxy_port }} -Dhttps.proxyHost={{ es_proxy_host }} -Dhttps.proxyPort={{ es_proxy_port }} {% endif %}"
  until: plugin_installed.rc == 0
  retries: 5
  delay: 5
